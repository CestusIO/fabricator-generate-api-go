// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package fabricatorgenerateapigo

import (
	"errors"
	"fmt"
)

const (
	// Player is a APIKind of type Player.
	Player APIKind = iota
	// S2S is a APIKind of type S2S.
	S2S
	// Admin is a APIKind of type Admin.
	Admin
	// Public is a APIKind of type Public.
	Public
)

var ErrInvalidAPIKind = errors.New("not a valid APIKind")

const _APIKindName = "PlayerS2SAdminPublic"

var _APIKindMap = map[APIKind]string{
	Player: _APIKindName[0:6],
	S2S:    _APIKindName[6:9],
	Admin:  _APIKindName[9:14],
	Public: _APIKindName[14:20],
}

// String implements the Stringer interface.
func (x APIKind) String() string {
	if str, ok := _APIKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("APIKind(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x APIKind) IsValid() bool {
	_, ok := _APIKindMap[x]
	return ok
}

var _APIKindValue = map[string]APIKind{
	_APIKindName[0:6]:   Player,
	_APIKindName[6:9]:   S2S,
	_APIKindName[9:14]:  Admin,
	_APIKindName[14:20]: Public,
}

// ParseAPIKind attempts to convert a string to a APIKind.
func ParseAPIKind(name string) (APIKind, error) {
	if x, ok := _APIKindValue[name]; ok {
		return x, nil
	}
	return APIKind(0), fmt.Errorf("%s is %w", name, ErrInvalidAPIKind)
}

// MarshalText implements the text marshaller method.
func (x APIKind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *APIKind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAPIKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
